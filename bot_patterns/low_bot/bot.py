import telebot
from telebot import types
import re
import os
import shutil
from datetime import datetime

#–¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∞
import threading
import time
from time import sleep
import requests

#–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
from params import my_token, bot_id, limit, path

#–º–æ–Ω–∏—Ç–æ—Ä
import subprocess
import sys
subprocess.Popen(["python.exe", f"{path}/monitor.py"])
subprocess.Popen(["python.exe", f"{path}/monitor4new_publick.py"])

token = my_token
bot = telebot.TeleBot(bot_id)

#—Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
publos_id = [] #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ id —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –º–æ–Ω–∏—Ç–æ—Ä (–¥–∞–ª–µ–µ –±—É–¥–µ—Ç, –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ –ø–∞–±–ª–∏–∫–æ–≤)
stealed_posts = [] #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ id —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–≤–µ–¥–µ–Ω—ã –º–æ–Ω–∏—Ç–æ—Ä, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ç–æ–≤—ã –ø–æ—Å—Ç—ã
helper = [] #—Ö—Ä–∞–Ω–∏–ª–∏—â–µ id —Å–æ–æ–±—â–µ–Ω–∏–π, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è-–ø–æ–º–æ—â–Ω–∏–∫–∏
what_deleting = 0 #id —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª—è–µ–º
pub_limit = limit #–ª–∏–º–∏—Ç –ø–∞–±–ª–∏–∫–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ

def print_time_now():
    time = datetime.now()
    time = time.strftime('%m-%d %H:%M:%S')
    print(f'--{time}--')

while True:#–±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π 4loop. —á—Ç–æ–±—ã, –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, —Ç–æ –±–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–ª—Å—è
    try:

        #—Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        def notifes():
            while True:
                try:
                    if os.path.getsize('groups_processors/notifications.txt') != 0:
                        f = open("publicks/publicks.txt", "r", encoding='utf-8')
                        lines = f.readlines()
                        f.close()
                        f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
                        chat__id = f.readline()
                        f.close()

                        if chat__id == '0' or len(os.listdir('./publicks')) == 2:
                            sleep(300) 
                        else:
                            posts_count = 0

                            for publick in lines:

                                #–Ω–∞–π—Ç–∏ –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤
                                publick_number = publick.partition(':')[0]
                                strin = f'{publick_number}: https://vk.com/' #—Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–µ—á—å –æ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                                group_name = publick.replace(strin, '')
                                group_name = group_name.replace("\n", '') #–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞
                                f = open(f"publicks/{group_name}.txt", "r", encoding='utf-8') #—É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞
                                posts_text = f.readlines()
                                f.close()
                                for text in posts_text:
                                    if text == '----------\n':
                                        posts_count += 1
                            #sleep(3)
                            f = open('groups_processors/notifications_count.txt', 'r')
                            message_count_4_noties = f.readline()
                            f.close()
                            if posts_count >= int(message_count_4_noties):

                                markup = types.InlineKeyboardMarkup(row_width=1) #–¥–æ–±–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                                ok = types.InlineKeyboardButton(f'{message_count_4_noties} –ø–æ—Å—Ç–æ–≤ ‚úÖ', callback_data='ok') #—á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–Ω–æ–≤–∞ –≤–∫–ª—é—á–∏–ª–∏—Å—å
                                markup.add(ok)
                                f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
                                chat__id = f.readline()
                                f.close()
                                bot.send_message(chat_id=chat__id, text=f'üí°', parse_mode='html', reply_markup=markup, disable_notification=True)

                                sleep(36000)
                except Exception as e:
                    print(e)
                    print_time_now()
                    print('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä—É–≥–∞—é—Ç—Å—è\n')
                    sleep(1800)


        t = threading.Thread(target=notifes, args=[])
        t.start()

        def send_group_img(text): #—Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ç–æ
            f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
            chat__id = f.readline()
            f.close()
            temp_files_list = list()
            media = list()
            files = dict()
            for filename in os.listdir("./images"):                               # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫–µ images
                temp_files_list.append(f'{os.getcwd()}\\images\\{filename}')      # –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ temp_files_list()
            for f in enumerate(temp_files_list):                                  # –¥–ª—è <f> –≤ temp_files_list()
                files[f"name-{f[0]}"] = open(f[1], "rb")                          # files() —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º name-{f[0]} ##f[0] - –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –ø–∞–ø–∫–µ; f[1] - —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É
                if f[0] == 0:                                                     # –µ—Å–ª–∏ —Å–∞–º–æ–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
                    media.append({"type": "photo",                                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ media —Ñ–æ—Ç–∫—É
                                "media": f"attach://name-{f[0]}",                 # –ø—Ä–∏—Å–≤–æ–∏—Ç—å –º–µ–¥–∏–∞ –∏–º—è-–∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤ files()
                                "caption": text,
                                "parse_mode": 'html'}                                  # —Ç–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –º–µ–¥–∏–∞
                                )
                else:                                                             # –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ–æ—Ç–æ
                    media.append({"type": "photo",                                # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ media —Ñ–æ—Ç–∫—É
                                "media": f"attach://name-{f[0]}"})                # –ø—Ä–∏—Å–≤–æ–∏—Ç—å –º–µ–¥–∏–∞ –∏–º—è-–∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤ files()
            params = {                                                            # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Å—Å—ã–ª–∫–µ
                "chat_id": chat__id, "media": str(media).replace("'", '"')}       # chat_id, 'media'-–≤—Å–µ —Ñ–æ—Ç–∫–∏, —á—Ç–æ –¥–æ–±–∞–≤–∏–ª–∏, –¥–æ–±–∞–≤–∏—Ç—å. –∑–∞–º–µ–Ω–∏—Ç—å –≤–µ–∑–¥–µ ' –Ω–∞ "
            request_url = "https://api.telegram.org/bot" + bot_id + "/sendMediaGroup"
            result = requests.post(request_url, params=params, files=files)
            if result.status_code == 200:
                return True
            else:
                return False

        def pub_checker(publick_url):

            try:
                nedo_id = publick_url.replace('https://vk.com/', '')
                url = f'https://api.vk.com/method/groups.getById?group_id={nedo_id}&access_token={token}&v=5.131'
                r = requests.get(url)
                src = r.json()
                real_publick = src['response'][0]['id']
            except:
                return 100

        def id_checker(message): #–ø—Ä–æ–≤–µ—Ä–∫–∞, —á–µ–π —ç—Ç–æ id —á–∞—Ç
            chat_id = message.chat.id
            f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
            chat__id = f.readline()
            f.close()
            if chat__id == str(chat_id):
                return True
            else:
                return False
        def warning_message(message):
            print_time_now()
            print(f'{message.from_user.username}({message.chat.id}) –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É')
            bot.send_message(message.chat.id, 'üö´–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –±–æ—Ç!üö´\n\n(–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ —Ç–∞–∫–æ–π, –Ω–∞–ø–∏—à–∏ @UnicChan)', parse_mode='html')

        @bot.message_handler(commands=['start']) #—Å—Ç–∞—Ä—Ç
        def start(message):
            chat_id = message.chat.id #id —á–∞—Ç–∞
            f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
            chat__id = f.readline()
            f.close()

            if chat__id == '0': #–≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º chat__id
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                menu = types.KeyboardButton('–º–µ–Ω—é‚ú®')

                markup.add(menu)
                print_time_now()
                print(f'{message.from_user.username}({message.chat.id}) –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!')
                start = bot.send_message(message.chat.id, 'ü¶æ', parse_mode='html', reply_markup=markup)
                start = bot.send_message(message.chat.id, '<b>–ù–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É!</b>', parse_mode='html', reply_markup=markup)

                f = open("groups_processors/chat__id.txt", "w", encoding='utf-8')
                chat__id = start.chat.id
                f.write(str(chat__id))
                f.close()

            elif chat__id == str(chat_id):
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                menu = types.KeyboardButton('–º–µ–Ω—é‚ú®')

                markup.add(menu)
                print_time_now()
                print(f'{message.from_user.username}({message.chat.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞!')
                start = bot.send_message(message.chat.id, 'ü¶æ', parse_mode='html', reply_markup=markup)
                start = bot.send_message(message.chat.id, '<b>–ù–∞—á–Ω—ë–º —Ä–∞–±–æ—Ç—É!</b>', parse_mode='html', reply_markup=markup)

                f = open("groups_processors/chat__id.txt", "w", encoding='utf-8')
                chat__id = start.chat.id
                f.write(str(chat__id))
                f.close()
            else:
                print_time_now()
                print(f'{message.from_user.username}({message.chat.id}) –ø—ã—Ç–∞–ª—Å—è /start')
                bot.send_message(message.chat.id, 'üö´–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ —Ç–≤–æ–π –±–æ—Ç!üö´\n\n(–µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–µ–±–µ —Ç–∞–∫–æ–π, –Ω–∞–ø–∏—à–∏ @UnicChan)', parse_mode='html')

        @bot.message_handler(content_types=['text']) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        def bot_message(message):
            if id_checker(message):

                def clear():
                    for ids in helper:
                        bot.delete_message(chat_id=message.chat.id, message_id=ids) #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                    for ids in publos_id:
                        bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=ids, reply_markup=None) #—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤—Å–µ–º–∏ –ø–∞–±–ª–∏–∫–∞–º–∏

                    what_deleting = 0 #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–±–ª–∏–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª—è–ª–∏ = 0 (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    publos_id.clear() #–æ—á–∏—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–±–ª–∏–∫–∞–º–∏
                    helper.clear() #–æ—á–∏—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                
                if message.chat.type == 'private':
                    if message.text.startswith('–º–µ–Ω—é'): #–º–µ–Ω—é —Å–æ –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        publicks = types.KeyboardButton('–º–æ–Ω–∏—Ç–æ—Ä üíª')
                        noties = types.KeyboardButton('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí°')
                        mixer = types.KeyboardButton('–º–∏–∫—Å–µ—Ä üö´')

                        markup.add(publicks, noties, mixer)
                        bot.send_message(message.chat.id, '<b>‚ú®–º–µ–Ω—é‚ú®</b>', parse_mode='html', reply_markup=markup)
                    elif message.text == '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí°':
                        f = open('groups_processors/notifications_count.txt', 'r', encoding='utf-8')
                        message_count_4_noties = f.readline()
                        f.close()

                        markup = types.InlineKeyboardMarkup(row_width=2) #–¥–æ–±–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        on = types.InlineKeyboardButton('–≤–∫–ª', callback_data='on') #–≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        off = types.InlineKeyboardButton('–≤—ã–∫–ª', callback_data='off') #–≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                        count = types.InlineKeyboardButton('–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ', callback_data='count') #–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        markup.add(on, off, count)
                        bot.send_message(message.chat.id, f'–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí°, –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–∞–±—Ä–∞–ª–æ—Å—å –±–æ–ª—å—à–µ <b>{message_count_4_noties}</b>?', parse_mode='html', reply_markup=markup, disable_web_page_preview=True) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–±–ª–∏–∫–∞

                    elif message.text.startswith('–º–æ–Ω–∏—Ç–æ—Ä'): #–¥–µ–π—Å—Ç–≤–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        show = types.KeyboardButton('üìÑ\n—Å–ø–∏—Å–æ–∫ –ø–∞–±–ª–∏–∫–æ–≤')
                        add = types.KeyboardButton('‚ûï\n–ø–∞–±–ª–∏–∫')
                        show_posts = types.KeyboardButton('üëÄ\n—á–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä')
                        menu = types.KeyboardButton('–º–µ–Ω—é üîô')
                        

                        markup.add(show, add, show_posts, menu)
                        bot.send_message(message.chat.id, 'üíª', parse_mode='html', reply_markup=markup)

                        clear()
                    elif message.text == 'üìÑ\n—Å–ø–∏—Å–æ–∫ –ø–∞–±–ª–∏–∫–æ–≤': #—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞–±–ª–∏–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏—Ö —É–¥–∞–ª–µ–Ω–∏—è
                        if os.path.getsize('publicks/publicks.txt') == 0:
                            markup = types.InlineKeyboardMarkup(row_width=1)
                            pusto = types.InlineKeyboardButton('0 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö', callback_data='adasd')
                            markup.add(pusto)

                            bot.send_message(message.chat.id, 'üìÇ', reply_markup=markup)
                        else:
                            number = 0
                            with open('publicks/publicks.txt', 'r', encoding='utf-8') as list_of_pub:
                                for line in list_of_pub:
                                    number += 1
                                    markup = types.InlineKeyboardMarkup(row_width=1) #–¥–æ–±–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–∞–±–ª–∏–∫–æ–º
                                    delete = types.InlineKeyboardButton('—É–±—Ä–∞—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∞', callback_data=f'del{number}') #—É–¥–∞–ª–∏—Ç—å –ø–∞–±–ª–∏–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
                                    markup.add(delete)
                                    publos = bot.send_message(message.chat.id, line.strip(), reply_markup=markup, disable_web_page_preview=True) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–±–ª–∏–∫–∞
                                    publos_id.append(publos.id) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–±–ª–∏–∫–æ–º

                            markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                            publicks = types.KeyboardButton('–º–æ–Ω–∏—Ç–æ—Ä üîô')
                            markup.add(publicks)
                            mini_helper = bot.send_message(message.chat.id, '<b>(–µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á–µ—à—å –º–µ–Ω—è—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞–∑–∞–¥)</b>', parse_mode='html', reply_markup=markup)
                            helper.append(mini_helper.id)

                    elif message.text == 'üëÄ\n—á–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä': #–ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                        if os.path.getsize('publicks/publicks.txt') == 0:
                            markup = types.InlineKeyboardMarkup(row_width=1)
                            pusto = types.InlineKeyboardButton('0 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö', callback_data='adasd')
                            markup.add(pusto)

                            bot.send_message(message.chat.id, 'üìÇ', reply_markup=markup)
                        else:
                            publicks_count = len(re.findall(r"[\n']+", open('publicks/publicks.txt').read())) + 1
                            for publick_number in range(1, publicks_count): #–Ω–æ–º–µ—Ä –ø–∞–±–ª–∏–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
                                with open('publicks/publicks.txt', 'r', encoding='utf-8') as file:
                                    lines = file.readlines()
                                    file.close()
                                    posts_count = 0 #—Å—á—ë—Ç—á–∏–∫ –ø–æ—Å—Ç–æ–≤

                                    f = open("publicks/publicks.txt", "r", encoding='utf-8') #—É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞
                                    lines = f.readlines()
                                    f.close()

                                    for line in lines:
                                        if str(publick_number) == line.partition(':')[0]: #–Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ—á–∫—É, –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–π == publick_number

                                            #–Ω–∞–π—Ç–∏ –∫–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤
                                            strin = f'{publick_number}: https://vk.com/' #—Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–µ—á—å –æ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                                            group_name = line.replace(strin, '')
                                            group_name = group_name.replace("\n", '') #–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞
                                            f = open(f"publicks/{group_name}.txt", "r", encoding='utf-8') #—É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞
                                            posts_text = f.readlines()
                                            f.close()
                                            for text in posts_text:
                                                if text == '----------\n':
                                                    posts_count += 1

                                            line = line.replace(f'{publick_number}: ', '')

                                            markup = types.InlineKeyboardMarkup(row_width=1) #–¥–æ–±–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –∫–∞–∂–¥—ã–º –ø–∞–±–ª–∏–∫–æ–º
                                            show_posts = types.InlineKeyboardButton(f'{posts_count} new', callback_data=f'show{publick_number}') #–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã
                                            markup.add(show_posts)
                                            stealled = bot.send_message(message.chat.id, line.strip(), reply_markup=markup, disable_web_page_preview=True) #–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–±–ª–∏–∫–∞
                                            stealed_posts.append(stealled.id) #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–±–ª–∏–∫–æ–º

                    elif message.text == '‚ûï\n–ø–∞–±–ª–∏–∫': #–¥–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫ –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞

                        # —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ +–ø–∞–±–ª–∏–∫
                        @bot.message_handler(func=lambda message: True) # '—Å–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–±–ª–∏–∫' + —Ñ—É–Ω–∫—Ü–∏—è –ø–æ –æ–±—Ä–∞—Ç–æ–∫–µ —Å—Å—ã–ª–∫–∏ + –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        def url_plus(message):
                            if len(re.findall(r"[\n']+", open('publicks/publicks.txt').read())) >= pub_limit:
                                bot.send_message(message.chat.id, 'üö´–¢—ã —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—à—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á—Å–µ—Å—Ç–≤–æ –ø–∞–±–ª–∏–∫–æ–≤üö´\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ, –Ω–∞–ø–∏—à–∏ @UnicChan', parse_mode='html')
                            else:
                                sent = bot.send_message(message.chat.id, '<em>–°–∫–∏–Ω—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–±–ª–∏–∫</em>', parse_mode='html')
                                bot.register_next_step_handler(sent, save_link)

                        def save_link(message): #–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
                            publick_link = message.text
                            if publick_link.startswith('https://vk.com/'): #–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                                if pub_checker(publick_link) != 100 : #–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–æ–±—â–µ —Ç–∞–∫–æ–π –ø–∞–±–ª–∏–∫
                                    how_many_lines = sum(1 for line in open('publicks/publicks.txt', 'r', encoding='utf-8')) + 1

                                    #–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–±–ª–∏–∫–∞
                                    f = open('publicks/publicks.txt', 'r', encoding='utf-8')
                                    check = f.readlines()
                                    f.close()

                                    if check == []: #–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–æ–±—â–µ –ø–µ—Ä–≤—ã–π –ø–∞–±–ª–∏–∫
                                        with open('publicks/new_publick.txt', 'w', encoding='utf-8') as file:
                                            file.write(publick_link)
                                            file.close()
                                        with open('publicks/publicks.txt', 'a', encoding='utf-8') as file:
                                            file.write(str(how_many_lines) + ": " + publick_link + "\n") #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–±–ª–∏–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–∏—Ç–æ—Ä–∞
                                            file.close()
                                        bot.send_message(message.chat.id, "<em>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä!</em>", parse_mode='html')
                                        new_publick = open(f"publicks/{publick_link.replace('https://vk.com/', '')}.txt", "w", encoding='utf-8') #—Å–æ–∑–¥–∞—Ç—å txt —Å id –ø–∞–±–ª–∏–∫–æ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                                    else:
                                        publicks_count = 0
                                        exist = False
                                        for line in check:
                                            publicks_count += 1
                                            strin = f'{publicks_count}: ' #—Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–µ—á—å
                                            publick = line.replace(strin, '') 
                                            publick = publick.replace("\n", '') #—Å—Å—ã–ª–∫–∞ –ø–∞–±–ª–∏–∫–∞
                                            if publick_link == publick: #–µ—Å–ª–∏ —É–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è –ø–∞–±–ª–∏–∫
                                                exist = True
                                                bot.send_message(message.chat.id, "–¢–∞–∫–æ–π –ø–∞–±–ª–∏–∫ —É–∂–µ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ!\n\n(–µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É)")
                                                url_plus(message)
                                                print_time_now()
                                                print(f'–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞–±–ª–∏–∫: {publick_link}')
                                            else:
                                                pass

                                        if exist == False:   
                                            with open('publicks/new_publick.txt', 'w', encoding='utf-8') as file:
                                                file.write(publick_link)
                                                file.close()
                                            with open('publicks/publicks.txt', 'a', encoding='utf-8') as file:
                                                file.write(str(how_many_lines) + ": " + publick_link + "\n") #–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–∞–±–ª–∏–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥ –º–æ–Ω–∏—Ç–æ—Ä–∞
                                                file.close()
                                            bot.send_message(message.chat.id, "<em>–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –º–æ–Ω–∏—Ç–æ—Ä!</em>", parse_mode='html')
                                            new_publick = open(f"publicks/{publick_link.replace('https://vk.com/', '')}.txt", "w", encoding='utf-8') #—Å–æ–∑–¥–∞—Ç—å txt —Å id –ø–∞–±–ª–∏–∫–æ–º –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                                else:
                                    bot.send_message(message.chat.id, "–° –ø–∞–±–ª–∏–∫–æ–º —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
                                    url_plus(message)
                            elif publick_link.startswith('–º–µ–Ω—é üîô') or publick_link.startswith('üìÑ\n—Å–ø–∏—Å–æ–∫ –ø–∞–±–ª–∏–∫–æ–≤') or publick_link.startswith('‚ûï\n–ø–∞–±–ª–∏–∫') or publick_link.startswith('üëÄ\n—á–µ–∫ –º–æ–Ω–∏—Ç–æ—Ä'):
                                pass
                            else: #–µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
                                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nhttps://vk.com/id_–ø–∞–±–ª–∏–∫–∞\n\n(–µ—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª, –Ω–∞–∂–º–∏ –Ω–∞ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É)")
                                url_plus(message)
            
                        url_plus(message)

                    elif message.text.startswith('–º–∏–∫—Å–µ—Ä'):
                        bot.send_message(message.chat.id, 'üö´–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞üö´\n\n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –µ—ë –¥–æ–±–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏ @UnicChan') 
                    else:
                        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                        publicks = types.KeyboardButton('–º–æ–Ω–∏—Ç–æ—Ä üíª')
                        noties = types.KeyboardButton('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí°')
                        mixer = types.KeyboardButton('–º–∏–∫—Å–µ—Ä ‚å®Ô∏è')

                        markup.add(publicks, noties, mixer)
                        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫? –õ–æ–≤–∏\n       <b>‚ú®–º–µ–Ω—é‚ú®</b>', parse_mode='html', reply_markup=markup)
                else:
                    bot.send_message(message.chat.id, 'üö´–¢–æ–ª—å–∫–æ –ª–∏—á–∫–∞!üö´')
            else:
                warning_message(message)

        @bot.callback_query_handler(func=lambda call: True) #–æ–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
        def callback_inline(call):
            try:
                if call.message:
                    
                    def clear(message_id, txt):
                        f = open("groups_processors/chat__id.txt", "r", encoding='utf-8')
                        chat__id = f.readline()
                        f.close()
                        for ids in publos_id:
                            bot.edit_message_reply_markup(chat_id=chat__id, message_id=ids, reply_markup=None) #—É–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ –≤—Å–µ–º–∏ –ø–∞–±–ª–∏–∫–∞–º–∏

                        for ids in helper:
                            bot.delete_message(chat_id=chat__id, message_id=ids) #—É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                        bot.edit_message_text(chat_id=chat__id, message_id=message_id, text=f'<s>—É–±—Ä–∞–Ω –∏–∑ {txt}</s>', parse_mode='html', reply_markup=None) #–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–∞–±–ª–∏–∫–∞ 

                        what_deleting = 0 #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–±–ª–∏–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª—è–ª–∏ = 0 (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                        publos_id.clear() #–æ—á–∏—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–±–ª–∏–∫–∞–º–∏
                        helper.clear() #–æ—á–∏—à–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

                    if call.data == 'count': #–µ—Å–ª–∏ —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

                        #—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        @bot.message_handler(func=lambda message: True)
                        def input_count(message):
                            sent = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç—ã —Ö–æ—á–µ—à—å?")
                            bot.register_next_step_handler(sent, reg_count)
                        def reg_count(message):
                            if message.text.isdigit(): #–µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                                if int(message.text) < 59:
                                    f = open('groups_processors/notifications_count.txt', 'w')
                                    f.write(message.text)
                                    f.close()
                                    bot.send_message(message.chat.id, f"–û–∫–µ–π, —è –ø–æ–º–µ–Ω—è–ª. –ú–æ–∂–µ—à—å —Å–ø–∞—Ç—å —Å–ø–æ–∫–æ–π–Ω–æ")
                                else:
                                    f = open('groups_processors/notifications_count.txt', 'w')
                                    f.write(message.text)
                                    f.close()
                                    bot.send_message(message.chat.id, "ü´†")
                                    bot.send_message(message.chat.id, f"–•–∑, –∑–∞—á–µ–º –≤–æ–æ–±—â–µ —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ –æ–∫–µ–π\n\n\n(–º–æ–∂–µ—à—å –≤—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å—á—ë)")
                            else:
                                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                                input_count(message)

                        input_count(call.message)

                    if call.data == 'photo_count': #–µ—Å–ª–∏ —Ö–æ—á–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ –≤ –º–∏–∫—Å–µ—Ä–µ

                        #—Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                        @bot.message_handler(func=lambda message: True)
                        def input_count(message):
                            sent = bot.send_message(message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –ø–æ—Å—Ç–µ?")
                            bot.register_next_step_handler(sent, reg_count)
                        def reg_count(message):
                            if message.text.isdigit(): #–µ—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
                                if 0 < int(message.text) <= 9:
                                    f = open('mixer/photo_count.txt', 'w', encoding='utf-8')
                                    f.write(message.text)
                                    f.close()
                                    if message.text == '1':
                                        bot.send_message(message.chat.id, f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª. –í –ø—Ä–µ–¥–ª–æ–∂–∫—É –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã —Å {message.text} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π")
                                    else:
                                        bot.send_message(message.chat.id, f"–û–∫–µ–π, –∑–∞–ø–æ–º–Ω–∏–ª. –í –ø—Ä–µ–¥–ª–æ–∂–∫—É –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã —Å {message.text} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
                                elif int(message.text) > 9:
                                    bot.send_message(message.chat.id, "–¢—ã –∂–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –≤ –≤–∫ –Ω–µ–ª—å–∑—è –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç—ã —Å –±–æ–ª–µ–µ —á–µ–º 9-—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!")
                                elif int(message.text) == 0:
                                    bot.send_message(message.chat.id, "0 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –ø–æ—Å—Ç–µ? –¢–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∏ '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏' –≤ –æ–ø—Ü–∏—è—Ö –º–∏–∫—Å–µ—Ä–∞.")
                            else:
                                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã")
                                input_count(message)

                        input_count(call.message)

                    if call.data == 'on':
                        f = open('groups_processors/notifications.txt', 'w', encoding='utf-8')
                        f.write('on')
                        f.close()
                        bot.send_message(chat_id=call.message.chat.id, text='–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!', parse_mode='html')
                    elif call.data == 'off':
                        f = open('groups_processors/notifications.txt', 'w', encoding='utf-8')
                        f.close()
                        bot.send_message(chat_id=call.message.chat.id, text='–û–ø–æ–≤–µ—â–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã!', parse_mode='html')
                    elif call.data == 'ok': #–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –Ω–∞–±—Ä–∞–≤—à–µ–º—Å—è –∫–æ–ª-–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
                    #–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å—Ç–æ–≤
                    elif call.data == 'clear_posts':
                        #–æ—á–∏—â–∞–µ–º –ø–æ—Å—Ç—ã
                        publick = call.message.text.replace('https://vk.com/', '')
                        f = open(f'publicks/{publick}.txt', 'w', encoding='utf-8')
                        f.close()

                        #–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª-–≤–∞ –ø–æ—Å—Ç–æ–≤ 'new' –Ω–∞ zero
                        markup = types.InlineKeyboardMarkup(row_width=1) #–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∞–∂–∞—Ç—ã–º –ø–∞–±–ª–∏–∫–æ–º
                        zero = types.InlineKeyboardButton('0 new', callback_data='zero')
                        markup.add(zero)

                        bot.send_message(chat_id=call.message.chat.id, text='<b>–û—á–∏—â–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –±—É–¥–µ–º –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ!</b>\n(–º–æ–∂–µ—à—å –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üí°, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)', parse_mode='html')
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'<em>{call.message.text}</em>', parse_mode='html', reply_markup=markup, disable_web_page_preview=True)

                    #—É–¥–∞–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ /// –≤—ã–≤–æ–¥ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –ø–∞–±–ª–∏–∫–∞
                    what_deleting = call.message.message_id

                    for num in range(1000):
                        #–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "–ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç—ã"
                        if call.data == f'show{num}':
                            #–Ω–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞
                            f = open("publicks/publicks.txt", "r", encoding='utf-8')
                            lines = f.readlines()
                            f.close()

                            for line in lines:
                                if str(num) == line.partition(':')[0]: #–Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ—á–∫—É, –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–π == publick_number

                                    strin = f'{num}: https://vk.com/' #—Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–µ—á—å –æ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                                    group_name = line.replace(strin, '') 
                                    group_name = group_name.replace("\n", '') #–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞

                            #–¥–æ—Å—Ç–∞—ë–º –ø–æ—Å—Ç—ã –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –Ω–∞ —ç–∫—Ä–∞–Ω
                            f = open(f"publicks/{group_name}.txt","r", encoding='utf-8') 
                            lines = f.readlines()
                            f.close()
                            photo = []
                            for line in lines:
                                if line == '----------\n':
                                    #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                                    file = open('groups_processors/2send.txt', 'r', encoding='utf-8')
                                    send_lines = file.readlines()
                                    file.close
                                    if len(send_lines) == 0:
                                        print('—Å—Ç—Ä–∞–Ω–Ω–æ, –Ω–æ –ø–æ—Å—Ç –ø—É—Å—Ç–æ–π.')
                                        pass
                                    else:
                                        if len(photo) != 0:
                                            ph = 0
                                            for this in photo:
                                                p = requests.get(this)
                                                out = open(f"images/{ph}.jpg", "wb")
                                                out.write(p.content)
                                                out.close()
                                                ph += 1
                                            symbols = 0
                                            for lin in send_lines:
                                                symbols += len(lin)
                                            if symbols >= 1024:
                                                #1 –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                                                send_line = ''
                                                symb = 0
                                                while symb < 900:
                                                    for o in send_lines:
                                                        for i in range(len(o)):
                                                            send_line = send_line + o[i]
                                                            symb += 1
                                                            if symb > 900:
                                                                break
                                                test_text = ''.join(send_line)
                                                send_group_img(test_text)

                                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'images')
                                                shutil.rmtree(path)
                                                os.mkdir('images')
                                                #2 –ø–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
                                                send_line = ''
                                                while symb < symbols:
                                                    for o in send_lines:
                                                        for i in range(len(o)):
                                                            send_line = send_line + o[i]
                                                            symb += 1
                                                bot.send_message(chat_id=call.message.chat.id, text=''.join(send_line), parse_mode='html', disable_web_page_preview=True)
                                            else:
                                                test_text = ''.join(send_lines)
                                                send_group_img(test_text)
                                                path = os.path.join(os.path.abspath(os.path.dirname(__file__)), 'images')
                                                shutil.rmtree(path)
                                                os.mkdir('images')
                                            photo.clear()
                                        else:
                                            bot.send_message(chat_id=call.message.chat.id, text=''.join(send_lines), parse_mode='html', disable_web_page_preview=True)

                                        bot.send_message(chat_id=call.message.chat.id, text='-------–∫–æ–Ω–µ—Ü_–ø–æ—Å—Ç–∞-------')

                                    #–æ—á–∏—â–µ–Ω–∏–µ 2send.txt –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
                                    f = open('groups_processors/2send.txt', 'w', encoding='utf-8')
                                    f.close()
                                else:
                                    f = open('groups_processors/2send.txt', 'a', encoding='utf-8')
                                    if line.startswith('<b>–§–û–¢–û:</b> '): #–µ—Å–ª–∏ –ø–æ–ø–∞–ª–æ—Å—å —Ñ–æ—Ç–æ
                                        photo2add = line.replace('<b>–§–û–¢–û:</b> ', '')
                                        photo2add = photo2add.replace('\n', '')
                                        photo.append(photo2add)
                                        f.close()
                                    elif line.startswith('id –ø–æ—Å—Ç–∞: '): #–µ—Å–ª–∏ –ø–æ–ø–∞–ª–∞—Å—Ç —Å—Ç—Ä–æ–∫–∞ —Å id –ø–æ—Å—Ç–∞
                                        pass
                                    else:
                                        f.write(line)
                                        f.close()

                            #–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≥—Ä—É–ø–ø—É, –ø–æ—Å—Ç—ã –∫–æ—Ç–æ—Ä–æ–π –≤—ã–≤–µ–¥–µ–Ω—ã
                            markup = types.InlineKeyboardMarkup(row_width=1) #–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –Ω–∞–∂–∞—Ç—ã–º –ø–∞–±–ª–∏–∫–æ–º
                            clear_posts = types.InlineKeyboardButton('–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—ã', callback_data=f'clear_posts') #–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å—Ç—ã
                            markup.add(clear_posts)

                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"<em>{call.message.text}</em>", parse_mode='html', reply_markup=markup, disable_web_page_preview=True)


                            what_deleting = 0 #id —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–∞–±–ª–∏–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —É–¥–∞–ª—è–ª–∏ = 0 (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                            stealed_posts.clear() #–æ—á–∏—â–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ id —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞–±–ª–∏–∫–∞–º–∏


                        #–µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ "—É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞"
                        elif call.data == f'del{num}':
                            #—É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø–∞–±–ª–∏–∫–æ–º
                            f = open("publicks/publicks.txt", "r", encoding='utf-8')
                            lines = f.readlines()
                            f.close()
                            group_name = ''
                            for line in lines:
                                if str(num) == line.partition(':')[0]: #–Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ—á–∫—É, –Ω–æ–º–µ—Ä –∫–æ—Ç–æ—Ä–æ–π == publick_number

                                    strin = f'{num}: https://vk.com/' #—Å—Ç—Ä–æ—á–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Å–µ—á—å –æ—Ç —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–∞–±–ª–∏–∫–æ–≤
                                    group_name = line.replace(strin, '') 
                                    group_name = group_name.replace("\n", '') #–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞
                            print_time_now()
                            print(f'—É–¥–∞–ª–∏–ª –ø–∞–±–ª–∏–∫ –∏–∑ –º–æ–Ω–∏–∫–∞: {group_name}')
                            os.remove(f'publicks/{group_name}.txt')
                            os.remove(f'groups_processors/{group_name}_id.txt')
                            os.remove(f'groups_processors/{group_name}_timer.txt')

                            #—É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∞
                            f = open("publicks/publicks.txt", "r", encoding='utf-8')
                            lines = f.readlines()
                            f.close()
                            f = open("publicks/publicks.txt", "w", encoding='utf-8')
                            for line in lines:
                                if line.partition(':')[0]!=f"{num}" :
                                    f.write(line)
                            f.close()
                            
                            #–ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
                            f = open("publicks/publicks.txt", "r", encoding='utf-8') 
                            lines = f.readlines()
                            f.close()
                            f = open("publicks/publicks.txt", "w", encoding='utf-8')
                            for line in lines:
                                remake = ''
                                if int(line.partition(':')[0]) < num:
                                    f.write(line)
                                elif int(line.partition(':')[0]) - 1 == num:
                                    # remake = remake + str(num)
                                    # for i in range(1, len(line)):
                                    #     remake = remake + line[i]
                                    # f.write(remake)
                                    # remake = ''
                                    remake += f'{num}:'
                                    remake += line.partition(':')[2]
                                    f.write(remake)
                                else:
                                    replace2 = int(line.partition(':')[0]) - 1
                                    remake += str(replace2)
                                    # for i in range(1, len(line)):
                                    #     remake = remake + line[i]
                                    # f.write(remake)
                                    remake += f":{line.partition(':')[2]}"
                                    f.write(remake)
                            f.close()

                            text = '–º–æ–Ω–∏—Ç–æ—Ä–∞'
                            clear(call.message.message_id, text)

            except Exception as e:
                print_time_now()
                print(f'–æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ inline –∫–Ω–æ–ø–∫–∏!\n{repr(e)}')   

        bot.polling(none_stop=True)

    except Exception as e:
        print(e)
        print_time_now()
        print('–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!')
        time.sleep(10)